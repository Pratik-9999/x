//1st javaFile

 
import java.util.Arrays; 
import java.util.Scanner; 
import javax.swing.text.html.MinimalHTMLWriter; 
 
public class SJF { 
private Scanner sc; 
 
public void execute() 
{ 
sc = new Scanner(System.in); 
 
//--------FCFS 
System.out.println("Enter Number of Processes:"); 
int numProcess=sc.nextInt(); 
Process []process=new Process[numProcess]; 
 
//Accept Input 
for(int i=0;i<numProcess;i++) 
{ 
System.out.println("P("+(i+1)+"):Enter Arrival time & Burst time"); 
int at=sc.nextInt(); 
int bt=sc.nextInt(); 
//System.out.println("P("+(i+1)+"):Enter Arrival time"); 
 
process[i]=new Process("P"+(i+1), bt, at); 
} 
 
int min=Integer.MAX_VALUE; 
int count=0,shortest=0; 
int time=0; 
int sum=0; 
double TotalWT=0, TotalTAT=0,avgWT=0,avgTAT=0; 
boolean check=false; 
System.out.println("Output for the Shortest job First Algorithm:\n\n"); 
 
System.out.println("\n\nPRNo\tBT\tAT\tCT\tTAT\tWT"); 
System.out.println("===================================================================
==============="); 
 
while(count<numProcess) 
{ 
// check=false;//remove this if given wrong i=output 
//find shortest process till time 
for(int i=0;i<numProcess;i++) 
{ 
 
if(process[i].AT<=time &&(process[i].remBT<min && process[i].remBT>0)) 
{ 
shortest=i; //3 
min=process[i].remBT; 
check=true; 
} 
} 
if(check==false) //No process is present currently 
{ 
time++; 
continue; 
} 
process[shortest].remBT--; //1=1-1=0scheduled shortest process for one unit time 
min=process[shortest].remBT; //0 
 
if(min==0) //process completes its execution 
{ 
min=Integer.MAX_VALUE; 
count++; 
sum=time+1; 
process[shortest].CT=sum; 
process[shortest].TAT=process[shortest].CT-process[shortest].AT; 
process[shortest].WT=process[shortest].TAT-process[shortest].BT; 
//if(process[shortest].WT<0) 
// process[shortest].WT=0; 
TotalWT=TotalWT+process[shortest].WT; 
TotalTAT=TotalTAT+process[shortest].TAT; 
 
process[shortest].display(); 
} 
time++; 
 
 
} 
 
avgTAT=(double)TotalTAT/numProcess; 
avgWT=(double)TotalWT/numProcess; 
System.out.println("Average Waiting Time"+avgWT); 
System.out.println("Average TAT="+avgTAT); 
} 
} 


//2nd java File

public class Process {
      public Process(String name, int bT, int aT) {
	
		this.name = name;
		BT = bT;
		AT = aT;
		WT=TAT=CT=remBT=0;
		priority=0;
	}
	String name;
      public Process(String name, int bT, int aT, int priority) {
		
		this.name = name;
		BT = bT;
		AT = aT;
		this.priority = priority;
		WT=TAT=CT=0;
		remBT=BT;
		flag=false;
	}
	int BT,AT,CT,TAT,FT,WT,remBT,priority;
      boolean flag;
      
      public void display()
      {
    	  System.out.println(name+"\t"+BT+"\t"+AT+"\t"+CT+"\t"+TAT+"\t"+WT+"\t"+priority);
    	  
    	  
      }
      
}


//3rd Java file
import java.util.Comparator;

public class SortByArrival implements Comparator<Process>
{

	@Override
	public int compare(Process o1, Process o2) {
		// TODO Auto-generated method stub
		return o1.AT-o2.AT;
	}

}


//4th java file

import java.util.Comparator;
public class SortByPriority implements Comparator<Process>{

	@Override
	public int compare(Process o1, Process o2) {
		
		return o1.priority-o2.priority;
	}



}


